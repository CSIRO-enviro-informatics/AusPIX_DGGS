
import shapefile
import csv

''' generate DGGS bounding shapefile from the points 
This code suits the "add_DGGS" module
reads a csv of DGGS corners generated by add_DGGS.py
and converts it into a shapefile useing the NW NE SE SW outputs from add_DGGS
NB: Not sure of the accuracy of shapefile - seems to be working in total confirmity with other datasets - worked in arcGIS

Joseph Bell Geoscience Australia
'''

# read the file
f = r'\\xxxxxxRiverGaugeLocationsAU_DGGS.csv'

def convertToFloat(coord):  # converts the coords from strings to numbers (floats)
    thisCoord = list()
    thisCoord.append(float(coord[0]))
    thisCoord.append(float(coord[1]))
    return thisCoord

#set up shapefile for output
w = shapefile.Writer(shapefile.POLYGON)
w.field('Name', 'C', '60')
w.field('StationNumber', 'C', '20')
w.field('DGGSrHEALPix', 'C', '40')
w.field('LongitudeWGS84', 'C', '20')  #using 'C' = character = ensures the correct number
w.field('LatitudeWGS84', 'C', '20')
w.field('Cell_Width', 'C', '20')
w.field('Resolution', 'C', '20')


with open(f) as csvDataFile:
    csvReader = csv.reader(csvDataFile)

    next(csvReader)  # skip the header



    for row in csvReader: # read through the source file line by line

        thisCell = list()
        NW = convertToFloat(row[8].split('  '))
        NE = convertToFloat(row[9].split('  '))
        SE = convertToFloat(row[10].split('  '))
        SW = convertToFloat(row[11].split('  '))
        # print(NW, NE, SE, NE)

        thisCell.append(NW)
        thisCell.append(NE)
        thisCell.append(SE)
        thisCell.append(SW)
        thisCell.append(NW)  # to come back to origin

        # print(thisCell)

        w.poly(parts=[thisCell])
        # w.record(row[3], row[10])
        thisName = row[0]
        thisDGGS = row[5]

        print(thisName, thisDGGS)
        w.record(Name = row[0], StationNumber = row[1], DGGSrHEALPix = row[5], LongitudeWGS84 = float(row[4]), LatitudeWGS84 = float(row[3]), Cell_Width = row[6], Resolution=(int(len(row[5]) - 1)))


w.autoBalance = 1
thisShapeFile = r'\\prod.lan\active\ops\nlib\NLI Reform Project\Place Names Linked Data Project\RiverGauges\RiverGaugesDGGS3'
w.save(thisShapeFile + '.shp')

#project the shapefile into 84
# a simple method of writing a single projection


prj = open("%s.prj" % thisShapeFile, "w")
epsg = 'GEOGCS["WGS 84",DATUM["WGS_1984",SPHEROID["WGS 84",6378137,298.257223563]],PRIMEM["Greenwich",0],UNIT["degree",0.0174532925199433]]'
prj.write(epsg)
prj.close()

print('finished')


